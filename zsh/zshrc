### Completion ###
setopt COMPLETE_IN_WORD
autoload -U compinit
compinit
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # case insensitive completion


### Colors ###
export CLICOLOR=1
autoload colors
colors


### History ###
export HISTFILE=$HOME/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
setopt EXTENDED_HISTORY     # add timestamps to history
setopt APPEND_HISTORY       # adds history
setopt INC_APPEND_HISTORY   # adds history incrementally
setopt SHARE_HISTORY        # share across sessions
setopt HIST_IGNORE_ALL_DUPS # don't record dupes in history
setopt HIST_IGNORE_DUPS
setopt HIST_REDUCE_BLANKS


### Settings ###
unsetopt correct_all
bindkey -e                                       # use emacs key bindings
bindkey '^r' history-incremental-search-backward # make Control-r work
bindkey '^[[Z' reverse-menu-complete             # shift-tab to cycle backwards
bindkey "^[[3~" delete-char                      # make delete key work
bindkey "^[3;5~" delete-char                     # make delete key work
bindkey "^U" backward-kill-line                  # C-u acts like bash
autoload -U select-word-style
select-word-style bash

setopt LOCAL_OPTIONS # allow functions to have local options
setopt LOCAL_TRAPS   # allow functions to have local traps
setopt PROMPT_SUBST
setopt AUTO_CD
setopt RC_QUOTES     # 'allow ''single'' quote interpolation'
stty -ixon -ixoff    # disable scroll lock
export EDITOR=vim
set -o emacs

function try_source() {
    [ -f "$1" ] && source "$1"
}

try_source $HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
try_source $HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=244'
try_source $HOME/.zsh/
try_source /usr/local/share/chruby/chruby.sh
try_source /usr/local/share/chruby/auto.sh
try_source /usr/local/share/gem_home/gem_home.sh


### Prompt ###
blk='\e[0;30m' # Black - Regular
red='\e[0;31m' # Red
grn='\e[0;32m' # Green
yel='\e[0;33m' # Yellow
blu='\e[0;34m' # Blue
mag='\e[0;35m' # Magenta
cyn='\e[0;36m' # Cyan
wht='\e[0;37m' # White
blk_bold='\e[1;30m' # Black - Bold
red_bold='\e[1;31m' # Red
grn_bold='\e[1;32m' # Green
yel_bold='\e[1;33m' # Yellow
blu_bold='\e[1;34m' # Blue
mag_bold='\e[1;35m' # Magenta
cyn_bold='\e[1;36m' # Cyan
wht_bold='\e[1;37m' # White
blk_ul='\e[4;30m' # Black - Underline
red_ul='\e[4;31m' # Red
grn_ul='\e[4;32m' # Green
yel_ul='\e[4;33m' # Yellow
blu_ul='\e[4;34m' # Blue
mag_ul='\e[4;35m' # Magenta
cyn_ul='\e[4;36m' # Cyan
wht_ul='\e[4;37m' # White
blk_bg='\e[40m'   # Black - Background
red_bg='\e[41m'   # Red
grn_bg='\e[42m'   # Green
yel_bg='\e[43m'   # Yellow
blu_bg='\e[44m'   # Blue
mag_bg='\e[45m'   # Magenta
cyn_bg='\e[46m'   # Cyan
wht_bg='\e[47m'   # White
plain='\e[0m'    # Text Reset

function in_git_repo() { git rev-parse 2> /dev/null }

function ps1_() {
        if in_git_repo; then
                ps_git_branch="${cyn}$(git symbolic-ref HEAD --short)${plain}"
        else
                ps_git_branch=""
        fi

        if type chruby > /dev/null; then
                ps_ruby_version="${red}$(chruby | grep \* | sed 's/.* //g')${plain}"
        else
                ps_ruby_version=""
        fi

        ps_env_var_list="${ps_ruby_version}${ps_git_branch}"

        if [[ -z $ps_env_var_list ]]; then
                ps_env_vars=""
        else
                ps_env_vars="${ps_ruby_version}${ps_git_branch}"
        fi

        ps_dir="${blu_ul}%~${plain}"
        ps_timestamp="${mag}$(date +'%H:%M:%S')${plain}"

        echo "${ps_timestamp} ${ps_dir} =+= ${ps_env_vars}"
}

export PS1='$(ps1_)
я '




### Aliases ###
alias ls='ls --color'
alias grep='grep --color=auto'
alias sudo='sudo ' # make aliases work with "sudo"
alias tmux='tmux -2' # let tmux use 256 colors

alias l='ls -lhpG'
# alias emacs='emacs-snapshot '
alias e='emacs'
alias t='tree -C --dirsfirst -I "coverage|build|dist|*srv|elm-stuff" '
alias t2='t -L 2'
alias be='bundle exec'
alias v='vagrant'
alias dk='docker'

### Functions ###
function show-path() { echo $PATH | tr ':' '\n' }

function git-ssh() {
    touch ~/.ssh/config
    echo "Host github.com\n  StrictHostKeyChecking no" >> ~/.ssh/config
}

# for debugging
function show-color-functions() {
    echo "red:     \t ${red}'jump in the urinal'${plain}"
    echo "green:   \t ${grn}'and stand on your head'${plain}"
    echo "yellow:  \t ${yel}'im the one thats alive'${plain}"
    echo "blue:    \t ${blu}'youre all dead'${plain}"
    echo "magenta: \t ${mag}'lean over the bowl'${plain}"
    echo "cyan:    \t ${cyn}'and then take a dive'${plain}"
    echo "white:   \t ${wht}'all of you are dead'${plain}"
    echo "black:   \t ${blk}'i am alive'${plain}\n"

    echo "bold red:     \t ${red_bold}'jump in the urinal'${plain}"
    echo "bold green:   \t ${grn_bold}'and stand on your head'${plain}"
    echo "bold yellow:  \t ${yel_bold}'im the one thats alive'${plain}"
    echo "bold blue:    \t ${blu_bold}'youre all dead'${plain}"
    echo "bold magenta: \t ${mag_bold}'lean over the bowl'${plain}"
    echo "bold cyan:    \t ${cyn_bold}'and then take a dive'${plain}"
    echo "bold white:   \t ${wht_bold}'all of you are dead'${plain}"
    echo "bold black:   \t ${blk_bold}'i am alive'${plain}\n"

}

#   Originally from https://github.com/mbadolato/iTerm2-Color-Schemes
function show-terminal-colors() {
    T='gYw'   # The test text

    echo -e "\n                 40m     41m     42m     43m\
     44m     45m     46m     47m";

    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
                       '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
                       '  36m' '1;36m' '  37m' '1;37m';
    do FG=${FGs// /}
       echo -en " $FGs \033[$FG  $T  "
       for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
       do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
       done
       echo;
    done
    echo
}

function shrug() {
    echo -n "¯\_(ツ)_/¯" | pbcopy
}

function fig() {
    # find . | grep
    find . -not -path "./.git/*" | grep "$@"
}

function ir() {
    # interactive rebase
    git rebase -i HEAD~$1
}

function wip() {
    if [[ $@ == "" ]]; then
        local msg=$(date +'%H:%M:%S')
    else
        local msg="$(echo $(date +'%H:%M:%S') '==>' $@)"
    fi

    git add -A
    git commit -m $msg
}

function d() {
    if [[ -z "$1" ]]; then
        pushd $HOME 2>&1 > /dev/null
    else
        pushd "$1" 2>&1 > /dev/null
    fi
}

function du() {
    popd 2>&1 > /dev/null
}

function ds() {
    dirs | tr ' ' '\n'
}

function pss() {
    local process_names=$(echo $@ | sed 's/ /\\|/g')
    ps aux | grep -v grep | grep "$process_names"
}

