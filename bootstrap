#!/usr/bin/env bash

function main() {
    parse_args $@
    set_platform_and_username

    [[ $zsh_flag      = true ]] && configure_zsh
    [[ $vim_flag      = true ]] && configure_vim
    [[ $dotfiles_flag = true ]] && configure_dotfiles

    printf '\n\n ~~~ finished configuring shell, you might need to restart ~~~ \n\n'
}

dotfiles=(
    'gemrc'
    'gitconfig'
    'gitignore_global'
    'pryrc'
    'rspec'
    'ruby-version'
    'tmux.conf'
)

platform='unknown'

env_dir="$HOME/dev-env"
bundler_dir="$HOME/.bundle"
zsh_dir="$HOME/.zsh"
vim_dir="$HOME/.vim"

bundler_flag=false # TODO
zsh_flag=false
vim_flag=false
dotfiles_flag=false

function parse_args() {
    for opt in "$@"
    do
        case "$opt" in
            --verbose)
                verbose_output=true
                ;;

            --dry-run)
                dry_run=true
                ;;

            --zsh)
                zsh_flag=true
                ;;

            --vim)
                vim_flag=true
                ;;

            --bundler)
                bundler_flag=false # TODO
                ;;

            --dotfiles)
                dotfiles_flag=true
                ;;

            *)
                printf "unknown argument:\t$(change_color $red $opt)\n\n"
                printf "usage:\n\t--verbose\t\t\tdebugging output\n"
                printf "\t--dry-run\t\t\tdon't actually make changes\n"
                printf "\t--zsh\t\t\t\tconfigure zsh\n"
                printf "\t--vim\t\t\t\tconfigure vim\n"
                printf "\t--dotfiles\t\t\tconfigure dotfiles\n"
                exit 1
                ;;
        esac
    done
}

function set_platform_and_username() {
    case "$(uname)" in
        "Darwin")
            platform="osx"
            username="ben"
            groupname="staff"
            ;;

        "Linux")
            platform="ubuntu"
            username="vagrant"
            groupname="vagrant"
            ;;

        *)
            printf "unknown platform:\t$(change_color $red $uname)\n\n"
            exit 1
            ;;
    esac
}

function configure_zsh() {
    if wet_flagged; then
        if [[ -e "$zsh_dir" ]]; then
            echo "configure_zsh failed: $(change_color $red $zsh_dir) already exists"
            exit 1
        fi

        if on_ubuntu_vm; then
            apt-get update
            apt-get install zsh -y
        fi

        cp -rf "$env_dir/zsh" $zsh_dir
        ./$zsh_dir/bootstrap
    fi

    if verbose_flagged; then
        if on_ubuntu_vm; then
            echo 'installed zsh'
        fi

        echo 'ran zsh bootstrap script'
    fi
}

function configure_vim() {
    # both osx and ubuntu have a pretty new version in /usr/bin so I don't need to install it, just
    # run the setup script
    if wet_flagged; then
        if [[ -e "$vim_dir" ]]; then
            echo "configure_vim failed: $(change_color $red $vim_dir) already exists"
            exit 1
        fi

        cp -rf "$env_dir/vim" $vim_dir
        ./$vim_dir/bootstrap
    fi

    if verbose_flagged; then
        echo 'ran vim bootstrap script'
    fi
}

function configure_dotfiles() {
    for dotfile in "${dotfiles[@]}"
    do
        local dotfile_path="${HOME}/.${dotfile}"
        local dev_env_dotfile_path="${env_dir}/dotfiles/${dotfile}"

        if wet_flagged; then
            backup_and_rm $dotfile $dotfile_path
            link_dotfile $dev_env_dotfile_path $dotfile_path
        fi

        if verbose_flagged; then
            echo "linked $(change_color $green $dotfile_path) to $(change_color $green $dev_env_dotfile_path)"
        fi
    done
}

function backup_and_rm() {
    local dotfile=$1
    local dotfile_path=$2

    make_backup $dotfile $dotfile_path && \
        rm $dotfile_path
}

function link_dotfile() {
    local dev_env_dotfile_path=$1
    local dotfile_path=$2

    ln -s $dev_env_dotfile_path $dotfile_path
    chown -R $username:$groupname $dotfile_path
}

function make_backup() {
    local dotfile=$1
    local dotfile_path=$2
    local timestamp=$(date +"%Y%m%d%H%M%S")

    local backup_file="${env_dir}/backups/${dotfile}_${timestamp}"

    if [[ -e $dotfile_path ]]; then
        cat $dotfile_path > $backup_file
        chown -R $username:$groupname $backup_file

        if verbose_flagged; then
            echo "created backup file $(change_color $green $backup_file)"
        fi
    else
        if verbose_flagged; then
            echo "no existing dotfile: $(change_color $yellow $dotfile_path)"
        fi
    fi
}

## helper functions

red=1; green=2; yellow=3; blue=4; magenta=5; cyan=6; white=7; black=8
function change_color() {
    echo "$(tput setaf $1)$2$(tput sgr0)"
}

function on_ubuntu_vm() { [[ $platform == 'ubuntu' ]]; }
function verbose_flagged() { [[ "$verbose_output" = true ]]; }
function wet_flagged() { [[ "$dry_run" != true ]]; }

main $@
